<?xml version="1.0"?>
<launch>
  <!-- Listen to messages from joysicks -->
  <node pkg="joy" name="joy_node" type="joy_node"/>

  <!-- Launch a map from the maps folder-->
  <arg name="map" default="$(find racecar_simulator)/maps/levine.yaml"/>
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map)"/>

  <!-- Launch the racecar model -->
  <include file="$(find racecar_simulator)/launch/racecar_model.launch"/>

  <!-- Begin the simulator with the parameters from params.yaml -->
  <node pkg="racecar_simulator" name="racecar_simulator" type="simulator" output="screen">
    <rosparam command="load" file="$(find racecar_simulator)/config/params.yaml"/>
  </node>

  <!-- Launch the mux node with the parameters from params.yaml -->
  <node pkg="racecar_simulator" name="mux_controller" type="mux" output="screen">
    <rosparam command="load" file="$(find racecar_simulator)/config/params.yaml"/>
  </node>

  <!-- Launch the behavior controller node with the parameters from params.yaml -->
  <node pkg="racecar_simulator" name="behavior_controller" type="behavior_controller" output="screen">
    <rosparam command="load" file="$(find racecar_simulator)/config/params.yaml"/>
  </node>

  <!-- Launch the Random Walker Node -->
  <node pkg="racecar_simulator" name="random_walker" type="random_walk" output="screen">
    <rosparam command="load" file="$(find racecar_simulator)/config/params.yaml"/>
  </node>

  <!-- Launch the Keyboard Node -->
  <node pkg="racecar_simulator" name="keyboard" type="keyboard" output="screen">
    <rosparam command="load" file="$(find racecar_simulator)/config/params.yaml"/>
  </node>

  <!-- ***Put launch command for new planner here:-->
  <!-- Launch the New Planner Node -->
  <!--   <node pkg="racecar_simulator" name="new node's name" type="new file name" output="screen">
          <rosparam command="load" file="$(find racecar_simulator)/params.yaml"/>
  	 </node>    -->

  
  <!-- Launch RVIZ -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find need4speed_wall_following)/launch/wallfollow_visualization.rviz" output="screen"/>

  <!-- Load the PID error and control nodes with the parameters from a YAML file -->
  <node pkg="wall_following" name="pid_error_node" type="pid_error.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/params.yaml"/>
  </node>
  <node pkg="wall_following" name="control_node" type="control.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/params.yaml"/>
  </node>
  <node pkg="wall_following" name="sim_connector_node" type="sim_connector.py" output="screen"/>

  <node pkg="need4speed_wall_following" name="error_analysis" type="need4speed_analysis" output="screen" />

  <node pkg="need4speed_wall_following" name="turn_identifier_node" type="turn_identifier.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/turn_identification_params.yaml"/>
  </node>
n
  <node pkg="need4speed_wall_following" name="car_status_visualizer" type="car_status_publisher" output="screen" />

  <node pkg="need4speed_gap_finding" name="gap_finding_node" type="find_gap" output="screen">
    <rosparam command="load" file="$(find need4speed_gap_finding)/config/gap_finding_params.yaml"/>
  </node>

  <node pkg="gap_finding" name="gap_visualizer" type="visualize_gap_finding.py" output="screen" />
  
  <node pkg="need4speed_wall_following" name="read_instruction_node" type="read_instruction.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/turn_identification_params.yaml"/>
  </node>

  <node pkg="need4speed_wall_following" name="turn_tracker_node" type="turn_tracker.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/turn_identification_params.yaml"/>
  </node>

  <node pkg="need4speed_wall_following" name="instruction_follower_node" type="instruction_follower.py" output="screen">
    <rosparam command="load" file="$(find need4speed_wall_following)/config/turn_identification_params.yaml"/>
  </node>

  <!-- output="screen" allows us to see print statements-->
  <node pkg="need4speed_scan_matching" name="scan_matcher_node" type="scan_matcher" output="screen"/> 
  <node pkg="need4speed_scan_matching" name="scan_match_quality_node" type="scan_match_quality" output="screen"/>

</launch>
